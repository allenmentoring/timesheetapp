define(['app/base', 'angularjs', 'fbase'], function(TimeSheetApp) {
  var DashBoardController;
  DashBoardController = (function() {
    function DashBoardController($scope, $rootScope, $sce, FirebaseService, $window, $firebaseObject, $firebaseArray) {
      $scope.startDate = moment().date(5).startOf('day');
      $scope.endDate = moment().date(5).endOf('day').add(13, 'd');
      $scope.formattedStart = $scope.startDate.format('M/D/YY');
      $scope.formattedEnd = $scope.endDate.format('M/D/YY');
      $scope.lessonModel = {
        student: "",
        length: "",
        notes: ""
      };
      FirebaseService.rootRef.child('students').once("value", function(snap) {
        var k, students, v, _ref;
        students = [];
        _ref = snap.val();
        for (k in _ref) {
          v = _ref[k];
          students.push({
            id: k,
            name: v.firstName + " " + v.lastName
          });
        }
        return $scope.$apply(function() {
          return $scope.students = students;
        });
      });
      $rootScope.$watch('userBasic', function(newVal, oldVal) {
        if ($rootScope.userBasic) {
          if (!($rootScope.userBasic.manager || $rootScope.userBasic.mentor)) {
            return $rootScope.roleNotSet = true;
          } else {
            return $scope.loadDashboard();
          }
        }
      });
      $scope.loadDashboard = function() {
        var datepickerSelector, endM, maxDate, minDate, startM, str;
        if ($rootScope.userBasic.manager) {
          $scope.selectedTab = 'TIMESHEETS';
          $scope.currentDash = 'Manager';
          return $scope.mentors = $firebaseObject(FirebaseService.rootRef.child('users').startAt('manager').endAt('manager'));
        } else {
          $scope.currentDash = 'Mentor';
          startM = moment($scope.formattedStart, 'M/D/YY');
          endM = moment($scope.formattedEnd, 'M/D/YY');
          str = (moment($scope.formattedStart, 'M/D/YY').format("MMMM Do YYYY")) + "-" + (moment($scope.formattedEnd, 'M/D/YY').format("MMMM Do YYYY"));
          $scope.currentTimeSheet = $firebaseObject($rootScope.currentUserRef.child("timesheets/" + str + "/lessons"));
          $scope.currentTimeSheetSubmitted = $firebaseObject($rootScope.currentUserRef.child("timesheets/" + str + "/submitted"));
          minDate = new Date(startM.year(), startM.month(), startM.date());
          maxDate = new Date(endM.year(), endM.month(), endM.date());
          datepickerSelector = $('#datepicker-01');
          datepickerSelector.datepicker({
            showOtherMonths: true,
            selectOtherMonths: true,
            minDate: minDate,
            maxDate: maxDate,
            dateFormat: 'm/d/yy',
            yearRange: '-1:+1'
          }).prev('.input-group-btn').on('click', function(e) {
            e && e.preventDefault();
            datepickerSelector.focus();
          });
          $.extend($.datepicker, {
            _checkOffset: function(inst, offset, isFixed) {
              return offset;
            }
          });
          return datepickerSelector.datepicker('widget').css({
            'margin-left': -datepickerSelector.prev('.input-group-btn').find('.btn').outerWidth() + 3
          });
        }
      };
      $scope.reRenderDatePicker = function() {
        var endM, maxDate, minDate, startM;
        startM = moment($scope.formattedStart, 'M/D/YY');
        endM = moment($scope.formattedEnd, 'M/D/YY');
        minDate = new Date(startM.year(), startM.month(), startM.date());
        maxDate = new Date(endM.year(), endM.month(), endM.date());
        $('#datepicker-01').datepicker("option", "maxDate", maxDate);
        $('#datepicker-01').datepicker("option", "minDate", minDate);
      };
      $scope.openTimesheetsTab = function() {
        return $scope.selectedTab = 'TIMESHEETS';
      };
      $scope.formatLabel = function(item) {
        if (item) {
          return item.name;
        }
      };
      $scope.openInvoicesTab = function() {
        return $scope.selectedTab = 'INVOICES';
      };
      $scope.nextPeriod = function() {
        var oldEndDate, str;
        oldEndDate = $scope.endDate;
        $scope.startDate = oldEndDate;
        $scope.formattedStart = $scope.startDate.format('M/D/YY');
        $scope.endDate = $scope.startDate.add(13, 'd');
        $scope.formattedEnd = $scope.endDate.format('M/D/YY');
        $scope.reRenderDatePicker();
        if ($scope.currentDash === 'Mentor') {
          if ($scope.currentTimeSheet) {
            $scope.currentTimeSheet.$destroy();
          }
          str = (moment($scope.formattedStart, 'M/D/YY').format("MMMM Do YYYY")) + "-" + (moment($scope.formattedEnd, 'M/D/YY').format("MMMM Do YYYY"));
          $scope.currentTimeSheet = $firebaseObject($rootScope.currentUserRef.child("timesheets/" + str + "/lessons"));
          return $scope.currentTimeSheetSubmitted = $firebaseObject($rootScope.currentUserRef.child("timesheets/" + str + "/submitted"));
        }
      };
      $scope.prevPeriod = function() {
        var str;
        $scope.startDate = moment($scope.formattedStart, 'M/D/YY').subtract(13, 'd');
        $scope.formattedStart = $scope.startDate.format('M/D/YY');
        $scope.endDate = moment($scope.formattedEnd, 'M/D/YY').subtract(13, 'd');
        $scope.formattedEnd = $scope.endDate.format('M/D/YY');
        $scope.reRenderDatePicker();
        if ($scope.currentDash === 'Mentor') {
          if ($scope.currentTimeSheet) {
            $scope.currentTimeSheet.$destroy();
          }
          str = (moment($scope.formattedStart, 'M/D/YY').format("MMMM Do YYYY")) + "-" + (moment($scope.formattedEnd, 'M/D/YY').format("MMMM Do YYYY"));
          $scope.currentTimeSheet = $firebaseObject($rootScope.currentUserRef.child("timesheets/" + str + "/lessons"));
          return $scope.currentTimeSheetSubmitted = $firebaseObject($rootScope.currentUserRef.child("timesheets/" + str + "/submitted"));
        }
      };
      $scope.addLesson = function() {
        var currentTimeSheet;
        if ($scope.lessonModel.student.id && $scope.lessonModel.length.length > 0 && $('#datepicker-01').val().length > 0) {
          currentTimeSheet = (moment($scope.formattedStart, 'M/D/YY').format("MMMM Do YYYY")) + "-" + (moment($scope.formattedEnd, 'M/D/YY').format("MMMM Do YYYY"));
          $scope.lessonModel.date = moment($('#datepicker-01').val(), 'M/D/YY').format("MMMM Do YYYY");
          $rootScope.currentUserRef.child("timesheets/" + currentTimeSheet + "/lessons").push().set($scope.lessonModel);
          return $scope.lessonModel = {
            student: "",
            length: "",
            notes: ""
          };
        }
      };
      $scope.removeLesson = function(id) {
        var str;
        str = (moment($scope.formattedStart, 'M/D/YY').format("MMMM Do YYYY")) + "-" + (moment($scope.formattedEnd, 'M/D/YY').format("MMMM Do YYYY"));
        return $rootScope.currentUserRef.child("timesheets/" + str + "/lessons/" + id).set(null);
      };
      $scope.submitTimeSheet = function() {
        var result, str;
        result = confirm("Are you sure?");
        if (result) {
          str = (moment($scope.formattedStart, 'M/D/YY').format("MMMM Do YYYY")) + "-" + (moment($scope.formattedEnd, 'M/D/YY').format("MMMM Do YYYY"));
          return $rootScope.currentUserRef.child("timesheets/" + str + "/submitted").set(true);
        }
      };
    }

    return DashBoardController;

  })();
  DashBoardController.$inject = ["$scope", "$rootScope", "$sce", "FirebaseService", "$window", "$firebaseObject", "$firebaseArray"];
  TimeSheetApp.controller('DashBoardController', DashBoardController);
  return DashBoardController;
});

//# sourceMappingURL=data:application/json;base64,
