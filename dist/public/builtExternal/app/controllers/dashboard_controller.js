define(['app/base', 'angularjs', 'fbase'], function(TimeSheetApp) {
  var DashBoardController;
  DashBoardController = (function() {
    function DashBoardController($scope, $rootScope, $sce, FirebaseService, $window, $firebaseObject, $firebaseArray) {
      $scope.moment = moment;
      $scope.startDate = moment({
        year: 2015,
        month: 6,
        day: 2
      }).add(Math.floor((moment().diff(moment({
        year: 2015,
        month: 6,
        day: 2
      }), 'days')) / 14) * 13, 'd');
      $scope.endDate = moment({
        year: 2015,
        month: 6,
        day: 2
      }).add(Math.ceil((moment().diff(moment({
        year: 2015,
        month: 6,
        day: 2
      }), 'days')) / 14) * 13, 'd');
      $scope.formattedStart = $scope.startDate.format('M/D/YY');
      $scope.formattedEnd = $scope.endDate.format('M/D/YY');
      $scope.currentTimeSheetKey = (moment($scope.formattedStart, 'M/D/YY').format("MMMM Do YYYY")) + "-" + (moment($scope.formattedEnd, 'M/D/YY').format("MMMM Do YYYY"));
      $scope.currentPayPeriod = (moment($scope.formattedStart, 'M/D/YY').format("MMMM Do YYYY")) + "-" + (moment($scope.formattedEnd, 'M/D/YY').format("MMMM Do YYYY"));
      $scope.lessonModel = {
        student: "",
        length: "",
        notes: ""
      };
      FirebaseService.rootRef.child('students').once("value", function(snap) {
        var k, students, v, _ref;
        students = [];
        _ref = snap.val();
        for (k in _ref) {
          v = _ref[k];
          students.push({
            id: k,
            name: v.firstName + " " + v.lastName,
            parent: v.parent
          });
        }
        return $scope.$apply(function() {
          return $scope.students = students;
        });
      });
      $rootScope.$watch('userBasic', function(newVal, oldVal) {
        if ($rootScope.userBasic) {
          if (!($rootScope.userBasic.manager || $rootScope.userBasic.mentor)) {
            return $rootScope.roleNotSet = true;
          } else {
            return $scope.loadDashboard();
          }
        }
      });
      $scope.nextPeriod = function() {
        var oldEndDate;
        oldEndDate = $scope.endDate;
        $scope.startDate = oldEndDate;
        $scope.formattedStart = $scope.startDate.format('M/D/YY');
        $scope.endDate = $scope.startDate.add(13, 'd');
        $scope.formattedEnd = $scope.endDate.format('M/D/YY');
        $scope.currentTimeSheetKey = (moment($scope.formattedStart, 'M/D/YY').format("MMMM Do YYYY")) + "-" + (moment($scope.formattedEnd, 'M/D/YY').format("MMMM Do YYYY"));
        $scope.reRenderDatePicker();
        if ($scope.currentDash === 'Mentor') {
          if ($scope.currentTimeSheet) {
            $scope.currentTimeSheet.$destroy();
          }
          $scope.currentTimeSheet = $firebaseObject($rootScope.currentUserRef.child("timesheets/" + $scope.currentTimeSheetKey + "/lessons"));
          return $scope.currentTimeSheetSubmitted = $firebaseObject($rootScope.currentUserRef.child("timesheets/" + $scope.currentTimeSheetKey + "/submitted"));
        }
      };
      $scope.prevPeriod = function() {
        $scope.startDate = moment($scope.formattedStart, 'M/D/YY').subtract(13, 'd');
        $scope.formattedStart = $scope.startDate.format('M/D/YY');
        $scope.endDate = moment($scope.formattedEnd, 'M/D/YY').subtract(13, 'd');
        $scope.formattedEnd = $scope.endDate.format('M/D/YY');
        $scope.currentTimeSheetKey = (moment($scope.formattedStart, 'M/D/YY').format("MMMM Do YYYY")) + "-" + (moment($scope.formattedEnd, 'M/D/YY').format("MMMM Do YYYY"));
        $scope.reRenderDatePicker();
        if ($scope.currentDash === 'Mentor') {
          if ($scope.currentTimeSheet) {
            $scope.currentTimeSheet.$destroy();
          }
          $scope.currentTimeSheet = $firebaseObject($rootScope.currentUserRef.child("timesheets/" + $scope.currentTimeSheetKey + "/lessons"));
          return $scope.currentTimeSheetSubmitted = $firebaseObject($rootScope.currentUserRef.child("timesheets/" + $scope.currentTimeSheetKey + "/submitted"));
        }
      };
      $scope.reRenderDatePicker = function() {
        var maxDate, minDate;
        minDate = $scope.startDate.toDate();
        maxDate = $scope.endDate.toDate();
        $('#datepicker-01').datepicker("option", "maxDate", maxDate);
        $('#datepicker-01').datepicker("option", "minDate", minDate);
      };
      $scope.loadDashboard = function() {
        var datepickerSelector, maxDate, minDate;
        if ($rootScope.userBasic.manager) {
          $scope.selectedTab = 'TIMESHEETS';
          $scope.currentDash = 'Manager';
          return $scope.mentors = $firebaseObject(FirebaseService.rootRef.child('users').startAt('mentor').endAt('mentor'));
        } else {
          $scope.currentDash = 'Mentor';
          $scope.currentTimeSheet = $firebaseObject($rootScope.currentUserRef.child("timesheets/" + $scope.currentTimeSheetKey + "/lessons"));
          $scope.currentTimeSheetSubmitted = $firebaseObject($rootScope.currentUserRef.child("timesheets/" + $scope.currentTimeSheetKey + "/submitted"));
          minDate = $scope.startDate.toDate();
          maxDate = $scope.endDate.toDate();
          datepickerSelector = $('#datepicker-01');
          datepickerSelector.datepicker({
            showOtherMonths: true,
            selectOtherMonths: true,
            minDate: minDate,
            maxDate: maxDate,
            dateFormat: 'm/d/yy',
            yearRange: '-1:+1'
          }).prev('.input-group-btn').on('click', function(e) {
            e && e.preventDefault();
            datepickerSelector.focus();
          });
          $.extend($.datepicker, {
            _checkOffset: function(inst, offset, isFixed) {
              return offset;
            }
          });
          datepickerSelector.datepicker('widget').css({
            'margin-left': -datepickerSelector.prev('.input-group-btn').find('.btn').outerWidth() + 3
          });
          return $scope.reRenderDatePicker();
        }
      };
      $scope.openTimesheetsTab = function() {
        return $scope.selectedTab = 'TIMESHEETS';
      };
      $scope.formatLabel = function(item) {
        if (item) {
          return item.name;
        }
      };
      $scope.openInvoicesTab = function() {
        $scope.selectedTab = 'INVOICES';
        return $scope.parents = $firebaseObject($rootScope.rootRef.child("parents"));
      };
      $scope.addLesson = function() {
        if (!$scope.lessonModel.student.id) {
          alert('Please select a student from the drop down menu.');
        }
        if ($scope.lessonModel.student.id && $scope.lessonModel.length.length > 0 && $('#datepicker-01').val().length > 0) {
          $scope.lessonModel.date = moment($('#datepicker-01').val(), 'M/D/YYYY').format("MMMM Do YYYY");
          $rootScope.currentUserRef.child("timesheets/" + $scope.currentTimeSheetKey + "/lessons").push().set($scope.lessonModel);
          return $scope.lessonModel = {
            student: "",
            length: "",
            notes: ""
          };
        }
      };
      $scope.removeLesson = function(id) {
        return $rootScope.currentUserRef.child("timesheets/" + $scope.currentTimeSheetKey + "/lessons/" + id).set(null);
      };
      $scope.submitTimeSheet = function() {
        var result, totalTime;
        result = confirm("Are you sure? You are finalizing your timesheet for this pay period. This action cannot be undone.");
        if (result) {
          $rootScope.currentUserRef.child("timesheets/" + $scope.currentTimeSheetKey + "/submitted").set(true);
          totalTime = 0.00;
          angular.forEach($scope.currentTimeSheet, function(value, key) {
            totalTime = totalTime + parseFloat(value.length);
            return $rootScope.rootRef.child("parents/" + value.student.parent.parentId + "/invoices/" + $scope.currentTimeSheetKey).push().set({
              date: value.date,
              studentName: value.student.name,
              length: value.length,
              notes: value.notes,
              mentorId: $rootScope.currentUid,
              mentorName: $rootScope.userBasic.firstName + " " + $rootScope.userBasic.lastName
            });
          });
          $rootScope.currentUserRef.child("timesheets/" + $scope.currentTimeSheetKey + "/totalTime").set(totalTime);
          return $rootScope.currentUserRef.child("timesheets/" + $scope.currentTimeSheetKey).setPriority('submitted');
        }
      };
      $scope.manageMentor = function(userid, mentor) {
        $scope.showManageMentor = true;
        return $scope.showManageMentorObj = mentor;
      };
      $scope.calculateTotalHoursForAParent = function(lessons) {
        var k, totalHours, v;
        totalHours = 0;
        for (k in lessons) {
          v = lessons[k];
          totalHours = parseFloat(v.length) + totalHours;
        }
        return totalHours;
      };
      $scope.manageParent = function(userid, parent) {
        $scope.showManageParent = true;
        return $scope.showManageParentObj = parent;
      };
      $scope.checkCurrentPayPeriod = function() {
        return moment().isBetween($scope.startDate, $scope.endDate);
      };
    }

    return DashBoardController;

  })();
  DashBoardController.$inject = ["$scope", "$rootScope", "$sce", "FirebaseService", "$window", "$firebaseObject", "$firebaseArray"];
  TimeSheetApp.controller('DashBoardController', DashBoardController);
  return DashBoardController;
});

//# sourceMappingURL=data:application/json;base64,
