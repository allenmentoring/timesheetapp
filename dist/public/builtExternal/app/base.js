define(['angularjs', 'angularroute', 'basefileupload', 'sanitize', 'anganimate', 'fbase', 'afire'], function(angular, route, basefileupload, sanitize, anganimate, Firebase, afire) {
  var TimeSheetApp;
  TimeSheetApp = angular.module('timeSheetApp', ['ngRoute', 'naif.base64', 'ngSanitize', 'ngAnimate', 'firebase']).config([
    '$routeProvider', function($routeProvider) {
      $routeProvider.when('/', {
        template: '<div class="row text-center ng-cloak"><div class="col-md-12"></div><i class=""></i>The App Canvas</div>',
        controller: [
          "$location", "$rootScope", function($location, $rootScope) {
            return $location.path($rootScope.rootPath);
          }
        ]
      });
      return $routeProvider.when('/dashboard', {
        templateUrl: "/javascripts/app/templates/dashboard.html",
        controller: 'DashBoardController'
      });
    }
  ]);
  TimeSheetApp.run([
    "$rootScope", "$location", "$window", "FirebaseService", "$route", "$timeout", function($rootScope, $location, $window, FirebaseService, $route, $timeout) {
      var auth;
      $rootScope.location = $location;
      $rootScope.authLoaded = false;
      auth = FirebaseService.rootRef.getAuth();
      $rootScope.rootRef = FirebaseService.rootRef;
      $rootScope.$on('$locationChangeSuccess', function() {
        $rootScope.location = window.location.pathname;
        return $rootScope.locationHash = window.location.hash;
      });
      $rootScope.disableModal = function() {
        return $rootScope.enableModal = false;
      };
      $rootScope.convertToSlug = function(text) {
        return text.toLowerCase().replace(/[^\w ]+/g, '').replace(/[^\w-]+/g, '-');
      };
      if (auth) {
        $rootScope.currentUid = auth.uid;
        $rootScope.rootRef.child("users/" + auth.uid + "/basic").once("value", function(snap) {
          return $rootScope.$apply(function() {
            $rootScope.userBasic = snap.val();
            $rootScope.currentUserRef = $rootScope.rootRef.child("users/" + auth.uid);
            return $rootScope.authLoaded = true;
          });
        });
        return $location.path('/dashboard');
      } else {
        return window.location = '/sign-in';
      }
    }
  ]);
  angular.element(document).ready(function() {
    return angular.bootstrap(document, ['timeSheetApp'], {
      strictDi: true
    });
  });
  return TimeSheetApp;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1VzZXJzL2tyaXNobmFyb2toYWxlL2NvZGUvbGV2ZWwvbGV2ZWwvdGltZXNoZWV0YXBwL3B1YmxpYy9qYXZhc2NyaXB0cy9hcHAvYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9rcmlzaG5hcm9raGFsZS9jb2RlL2xldmVsL2xldmVsL3RpbWVzaGVldGFwcC9hc3NldHMvamF2YXNjcmlwdHMvYXBwL2Jhc2UuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQUEsQ0FBTyxDQUFFLFdBQUYsRUFBZSxjQUFmLEVBQStCLGdCQUEvQixFQUFpRCxVQUFqRCxFQUE2RCxZQUE3RCxFQUEwRSxPQUExRSxFQUFtRixPQUFuRixDQUFQLEVBQW1HLFNBQUMsT0FBRCxFQUFVLEtBQVYsRUFBaUIsY0FBakIsRUFBaUMsUUFBakMsRUFBMkMsVUFBM0MsRUFBdUQsUUFBdkQsRUFBaUUsS0FBakUsR0FBQTtBQUdqRyxNQUFBLFlBQUE7QUFBQSxFQUFBLFlBQUEsR0FBZSxPQUFPLENBQUMsTUFBUixDQUFnQixjQUFoQixFQUErQixDQUFFLFNBQUYsRUFBYSxhQUFiLEVBQTRCLFlBQTVCLEVBQTBDLFdBQTFDLEVBQXVELFVBQXZELENBQS9CLENBQWlHLENBQUMsTUFBbEcsQ0FBMEc7SUFDMUcsZ0JBRDBHLEVBRTNHLFNBQUMsY0FBRCxHQUFBO0FBRUUsTUFBQSxjQUFjLENBQUMsSUFBZixDQUFxQixHQUFyQixFQUVFO0FBQUEsUUFBQSxRQUFBLEVBQVcseUdBQVg7QUFBQSxRQUNBLFVBQUEsRUFBYTtVQUFFLFdBQUYsRUFBZSxZQUFmLEVBQTRCLFNBQUMsU0FBRCxFQUFZLFVBQVosR0FBQTttQkFDdkMsU0FBUyxDQUFDLElBQVYsQ0FBZSxVQUFVLENBQUMsUUFBMUIsRUFEdUM7VUFBQSxDQUE1QjtTQURiO09BRkYsQ0FBQSxDQUFBO2FBT0EsY0FBYyxDQUFDLElBQWYsQ0FBcUIsWUFBckIsRUFDRTtBQUFBLFFBQUEsV0FBQSxFQUFjLDJDQUFkO0FBQUEsUUFDQSxVQUFBLEVBQWEscUJBRGI7T0FERixFQVRGO0lBQUEsQ0FGMkc7R0FBMUcsQ0FBZixDQUFBO0FBQUEsRUFpQkEsWUFBWSxDQUFDLEdBQWIsQ0FBa0I7SUFDZixZQURlLEVBQ0QsV0FEQyxFQUNZLFNBRFosRUFDdUIsaUJBRHZCLEVBQzBDLFFBRDFDLEVBQ29ELFVBRHBELEVBRWhCLFNBQUMsVUFBRCxFQUFhLFNBQWIsRUFBd0IsT0FBeEIsRUFBaUMsZUFBakMsRUFBa0QsTUFBbEQsRUFBMEQsUUFBMUQsR0FBQTtBQUNFLFVBQUEsSUFBQTtBQUFBLE1BQUEsVUFBVSxDQUFDLFFBQVgsR0FBc0IsU0FBdEIsQ0FBQTtBQUFBLE1BQ0EsVUFBVSxDQUFDLFVBQVgsR0FBd0IsS0FEeEIsQ0FBQTtBQUFBLE1BRUEsSUFBQSxHQUFPLGVBQWUsQ0FBQyxPQUFPLENBQUMsT0FBeEIsQ0FBQSxDQUZQLENBQUE7QUFBQSxNQUdBLFVBQVUsQ0FBQyxPQUFYLEdBQXFCLGVBQWUsQ0FBQyxPQUhyQyxDQUFBO0FBQUEsTUFLQSxVQUFVLENBQUMsR0FBWCxDQUFnQix3QkFBaEIsRUFBeUMsU0FBQSxHQUFBO0FBQ3ZDLFFBQUEsVUFBVSxDQUFDLFFBQVgsR0FBc0IsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUF0QyxDQUFBO2VBQ0EsVUFBVSxDQUFDLFlBQVgsR0FBMEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUZIO01BQUEsQ0FBekMsQ0FMQSxDQUFBO0FBQUEsTUFTQSxVQUFVLENBQUMsWUFBWCxHQUEwQixTQUFBLEdBQUE7ZUFDeEIsVUFBVSxDQUFDLFdBQVgsR0FBeUIsTUFERDtNQUFBLENBVDFCLENBQUE7QUFBQSxNQWFBLFVBQVUsQ0FBQyxhQUFYLEdBQTJCLFNBQUMsSUFBRCxHQUFBO2VBQ3pCLElBQUksQ0FBQyxXQUFMLENBQUEsQ0FBa0IsQ0FBQyxPQUFuQixDQUEyQixVQUEzQixFQUF1QyxFQUF2QyxDQUF5QyxDQUFDLE9BQTFDLENBQWtELFVBQWxELEVBQThELEdBQTlELEVBRHlCO01BQUEsQ0FiM0IsQ0FBQTtBQWlCQSxNQUFBLElBQUcsSUFBSDtBQUNFLFFBQUEsVUFBVSxDQUFDLFVBQVgsR0FBd0IsSUFBSSxDQUFDLEdBQTdCLENBQUE7QUFBQSxRQUdBLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBbkIsQ0FBMEIsUUFBQSxHQUFRLElBQUksQ0FBQyxHQUFiLEdBQWlCLFFBQTNDLENBQW1ELENBQUMsSUFBcEQsQ0FBMEQsT0FBMUQsRUFBa0UsU0FBQyxJQUFELEdBQUE7aUJBRWhFLFVBQVUsQ0FBQyxNQUFYLENBQWtCLFNBQUEsR0FBQTtBQUNoQixZQUFBLFVBQVUsQ0FBQyxTQUFYLEdBQXVCLElBQUksQ0FBQyxHQUFMLENBQUEsQ0FBdkIsQ0FBQTtBQUFBLFlBQ0EsVUFBVSxDQUFDLGNBQVgsR0FBNEIsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFuQixDQUEwQixRQUFBLEdBQVEsSUFBSSxDQUFDLEdBQXZDLENBRDVCLENBQUE7bUJBRUEsVUFBVSxDQUFDLFVBQVgsR0FBd0IsS0FIUjtVQUFBLENBQWxCLEVBRmdFO1FBQUEsQ0FBbEUsQ0FIQSxDQUFBO2VBVUEsU0FBUyxDQUFDLElBQVYsQ0FBZ0IsWUFBaEIsRUFYRjtPQUFBLE1BQUE7ZUFjRSxNQUFNLENBQUMsUUFBUCxHQUFtQixXQWRyQjtPQWxCRjtJQUFBLENBRmdCO0dBQWxCLENBakJBLENBQUE7QUFBQSxFQXlEQSxPQUFPLENBQUMsT0FBUixDQUFnQixRQUFoQixDQUF5QixDQUFDLEtBQTFCLENBQWdDLFNBQUEsR0FBQTtXQUM5QixPQUFPLENBQUMsU0FBUixDQUFrQixRQUFsQixFQUE0QixDQUFFLGNBQUYsQ0FBNUIsRUFBOEM7QUFBQSxNQUFDLFFBQUEsRUFBUyxJQUFWO0tBQTlDLEVBRDhCO0VBQUEsQ0FBaEMsQ0F6REEsQ0FBQTtTQTZEQSxhQWhFaUc7QUFBQSxDQUFuRyxDQUFBLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUgWydhbmd1bGFyanMnLCAnYW5ndWxhcnJvdXRlJywgJ2Jhc2VmaWxldXBsb2FkJywgJ3Nhbml0aXplJywgJ2FuZ2FuaW1hdGUnLCdmYmFzZScsICdhZmlyZSddLCAoYW5ndWxhciwgcm91dGUsIGJhc2VmaWxldXBsb2FkLCBzYW5pdGl6ZSwgYW5nYW5pbWF0ZSwgRmlyZWJhc2UsIGFmaXJlKSAtPlxuXG5cbiAgVGltZVNoZWV0QXBwID0gYW5ndWxhci5tb2R1bGUoJ3RpbWVTaGVldEFwcCcsIFsnbmdSb3V0ZScsICduYWlmLmJhc2U2NCcsICduZ1Nhbml0aXplJywgJ25nQW5pbWF0ZScsICdmaXJlYmFzZSddKS5jb25maWcgKFtcbiAgICAgICAgICAgICAgICAnJHJvdXRlUHJvdmlkZXInLFxuICAgICAgICAgICAgICAgICgkcm91dGVQcm92aWRlcikgLT5cblxuICAgICAgICAgICAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbiAnLycsXG4jICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJyb3cgdGV4dC1jZW50ZXIgbmctY2xvYWtcIj48ZGl2IGNsYXNzPVwiY29sLW1kLTEyXCI+PC9kaXY+PGkgY2xhc3M9XCJpY29uLXNwaW41IGFuaW1hdGUtc3BpblwiPjwvaT5Mb2FkaW5nLi4uPC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJyb3cgdGV4dC1jZW50ZXIgbmctY2xvYWtcIj48ZGl2IGNsYXNzPVwiY29sLW1kLTEyXCI+PC9kaXY+PGkgY2xhc3M9XCJcIj48L2k+VGhlIEFwcCBDYW52YXM8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IChbXCIkbG9jYXRpb25cIiwgXCIkcm9vdFNjb3BlXCIsICgkbG9jYXRpb24sICRyb290U2NvcGUpIC0+XG4gICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJHJvb3RTY29wZS5yb290UGF0aClcbiAgICAgICAgICAgICAgICAgICAgXSlcblxuICAgICAgICAgICAgICAgICAgJHJvdXRlUHJvdmlkZXIud2hlbiAnL2Rhc2hib2FyZCcsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi9qYXZhc2NyaXB0cy9hcHAvdGVtcGxhdGVzL2Rhc2hib2FyZC5odG1sXCJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0Rhc2hCb2FyZENvbnRyb2xsZXInXG5cbiAgICAgICAgICAgICAgIF0pXG5cbiAgVGltZVNoZWV0QXBwLnJ1biAoW1xuICAgIFwiJHJvb3RTY29wZVwiLCBcIiRsb2NhdGlvblwiLCBcIiR3aW5kb3dcIiwgXCJGaXJlYmFzZVNlcnZpY2VcIiwgXCIkcm91dGVcIiwgXCIkdGltZW91dFwiLFxuICAgICgkcm9vdFNjb3BlLCAkbG9jYXRpb24sICR3aW5kb3csIEZpcmViYXNlU2VydmljZSwgJHJvdXRlLCAkdGltZW91dCkgLT5cbiAgICAgICRyb290U2NvcGUubG9jYXRpb24gPSAkbG9jYXRpb25cbiAgICAgICRyb290U2NvcGUuYXV0aExvYWRlZCA9IGZhbHNlXG4gICAgICBhdXRoID0gRmlyZWJhc2VTZXJ2aWNlLnJvb3RSZWYuZ2V0QXV0aCgpXG4gICAgICAkcm9vdFNjb3BlLnJvb3RSZWYgPSBGaXJlYmFzZVNlcnZpY2Uucm9vdFJlZlxuXG4gICAgICAkcm9vdFNjb3BlLiRvbiAnJGxvY2F0aW9uQ2hhbmdlU3VjY2VzcycsIC0+XG4gICAgICAgICRyb290U2NvcGUubG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWVcbiAgICAgICAgJHJvb3RTY29wZS5sb2NhdGlvbkhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaFxuXG4gICAgICAkcm9vdFNjb3BlLmRpc2FibGVNb2RhbCA9ICgpIC0+XG4gICAgICAgICRyb290U2NvcGUuZW5hYmxlTW9kYWwgPSBmYWxzZVxuXG5cbiAgICAgICRyb290U2NvcGUuY29udmVydFRvU2x1ZyA9ICh0ZXh0KSAtPlxuICAgICAgICB0ZXh0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW15cXHcgXSsvZywnJykucmVwbGFjZSgvW15cXHctXSsvZywnLScpXG5cblxuICAgICAgaWYgYXV0aFxuICAgICAgICAkcm9vdFNjb3BlLmN1cnJlbnRVaWQgPSBhdXRoLnVpZFxuXG5cbiAgICAgICAgJHJvb3RTY29wZS5yb290UmVmLmNoaWxkKFwidXNlcnMvI3thdXRoLnVpZH0vYmFzaWNcIikub25jZSBcInZhbHVlXCIsIChzbmFwKSAtPlxuXG4gICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkgLT5cbiAgICAgICAgICAgICRyb290U2NvcGUudXNlckJhc2ljID0gc25hcC52YWwoKVxuICAgICAgICAgICAgJHJvb3RTY29wZS5jdXJyZW50VXNlclJlZiA9ICRyb290U2NvcGUucm9vdFJlZi5jaGlsZChcInVzZXJzLyN7YXV0aC51aWR9XCIpXG4gICAgICAgICAgICAkcm9vdFNjb3BlLmF1dGhMb2FkZWQgPSB0cnVlXG5cbiAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9kYXNoYm9hcmQnKVxuXG4gICAgICBlbHNlXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICcvc2lnbi1pbidcblxuICBdKVxuXG5cblxuICBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLnJlYWR5IC0+XG4gICAgYW5ndWxhci5ib290c3RyYXAgZG9jdW1lbnQsIFsndGltZVNoZWV0QXBwJ10sIHtzdHJpY3REaTp0cnVlfVxuXG5cbiAgVGltZVNoZWV0QXBwIl19
